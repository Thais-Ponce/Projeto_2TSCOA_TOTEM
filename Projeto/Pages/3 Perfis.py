import streamlit as st
import pandas as pd

PRIMARY = "#1C3D5A"
ACCENT = "#B49047"
BG = "#F1E5D1"

st.set_page_config(page_title="Perfis dos Clusters", layout="wide")

st.markdown(f"""
    <style>
    h1, h2, h3, .stMetricLabel {{
        color: {ACCENT} !important;
    }}
    section[data-testid="stSidebar"] {{
        background-color: {PRIMARY} !important;
    }}
    section[data-testid="stSidebar"] * {{
        color: white !important;
    }}
    .cluster-card {{
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 25px;
    }}
    </style>
""", unsafe_allow_html=True)

st.sidebar.image(
    r"Projeto/TOTEM_LOGO.png",
    width=200
)

st.title("Perfis dos Clusters")

df = pd.read_csv(
    r"Projeto/base_clusterizada.csv",
    sep=";"
)

rename_dict = {
    "CD_CLIENTE": "Cliente",
    "cluster": "Cluster",
    "Tempo_Relacionamento_media": "Tempo de Relacionamento (dias)",
    "RECEITA_RECORRENTE_media": "Receita Recorrente Anual (12M)",
    "RESPOSTA_NPS_RELACIONAL": "Satisfa√ß√£o M√©dia (NPS)"
}
df.rename(columns=rename_dict, inplace=True)

for col in ["Receita Recorrente Anual (12M)", "Satisfa√ß√£o M√©dia (NPS)", "Tempo de Relacionamento (dias)"]:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors="coerce")

df["Receita Recorrente Anual (12M)"] = df["Receita Recorrente Anual (12M)"] / 1_000_000

metricas = df.groupby("Cluster").agg({
    "Cliente": "nunique",
    "Receita Recorrente Anual (12M)": "mean",
    "Satisfa√ß√£o M√©dia (NPS)": "mean",
    "Tempo de Relacionamento (dias)": "mean"
}).reset_index()

if metricas.shape[0] == 0:
    st.warning("Nenhum cluster encontrado na base. Verifique a coluna 'cluster' em base_clusterizada.csv")
    st.stop()

cluster_cliente_ideal = int(metricas.loc[metricas["Receita Recorrente Anual (12M)"].idxmax(), "Cluster"])
cluster_premium = int(metricas.loc[metricas["Tempo de Relacionamento (dias)"].idxmax(), "Cluster"])
cluster_risco = int(metricas.loc[metricas["Satisfa√ß√£o M√©dia (NPS)"].idxmin(), "Cluster"])

todos = set(metricas["Cluster"].astype(int).tolist())
restantes = todos - {cluster_cliente_ideal, cluster_premium, cluster_risco}

restantes_metricas = metricas[metricas["Cluster"].astype(int).isin(restantes)].copy()
restantes_metricas["Cluster"] = restantes_metricas["Cluster"].astype(int)
restantes_sorted = restantes_metricas.sort_values("Receita Recorrente Anual (12M)", ascending=False)["Cluster"].tolist()

cluster_crescimento = None
cluster_estavel = None

if len(restantes_sorted) == 1:
    cluster_estavel = restantes_sorted[0]
elif len(restantes_sorted) >= 2:
    cluster_crescimento = restantes_sorted[0]
    cluster_estavel = restantes_sorted[1]

personas = {}

def safe_add(cluster_id, nome, desc, cor):
    if cluster_id is None:
        return
    personas[int(cluster_id)] = (nome, desc, cor)

safe_add(cluster_cliente_ideal, "üíé Cliente Ideal", ["Alta Receita", "Alta Satisfa√ß√£o", "Baixo Churn"], "#1E90FF")
safe_add(cluster_premium, "üèÜ Premium", ["Maior Ticket M√©dio", "Relacionamento Longo", "Satisfa√ß√£o alta"], "#DAA520")
safe_add(cluster_risco, "‚ö†Ô∏è Em Risco", ["Receita Baixa", "NPS Negativo", "Churn elevado"], "#B22222")
safe_add(cluster_crescimento, "üìà Potencial de Crescimento", ["Receita M√©dia", "Alto Engajamento", "Upsell poss√≠vel"], "#32CD32")

for cid in sorted(todos):
    if int(cid) not in personas:
        personas[int(cid)] = ("üîÑ Est√°vel", ["Receita Consistente", "Satisfa√ß√£o Mediana", "Fidelidade m√©dia"], "#708090")

explicacoes = {
    "üíé Cliente Ideal": {
        "quem": "Clientes de maior receita, NPS alto e relacionamento longo.",
        "importancia": "S√£o os que mais geram valor para a TOTVS, al√©m de serem promotores da marca.",
        "acao": "Manter engajamento, oferecer programas de fidelidade e transform√°-los em cases de sucesso."
    },
    "üèÜ Premium": {
        "quem": "Clientes de receita alta e tempo de relacionamento elevado, mas nem sempre com o NPS mais alto.",
        "importancia": "S√£o clientes fi√©is e est√°veis, que t√™m alto ticket m√©dio.",
        "acao": "Investir em atendimento personalizado para elevar a satisfa√ß√£o e fortalecer o v√≠nculo."
    },
    "üìà Potencial de Crescimento": {
        "quem": "Clientes com receita e engajamento medianos, mas com espa√ßo para evoluir.",
        "importancia": "Representam a oportunidade de upsell e expans√£o.",
        "acao": "Estrat√©gias de cross-sell, treinamentos e ofertas personalizadas para aumentar receita e reten√ß√£o."
    },
    "‚ö†Ô∏è Em Risco": {
        "quem": "Clientes de baixa receita, NPS negativo e sinais de poss√≠vel churn.",
        "importancia": "Podem impactar negativamente na taxa de reten√ß√£o.",
        "acao": "Identificar motivos de insatisfa√ß√£o, atuar em recupera√ß√£o e avaliar custo-benef√≠cio do esfor√ßo de reten√ß√£o."
    },
    "üîÑ Est√°vel": {
        "quem": "Clientes de receita consistente, satisfa√ß√£o e fidelidade medianas.",
        "importancia": "Garantem estabilidade no faturamento e representam a 'base s√≥lida'.",
        "acao": "Monitorar e engajar para evitar que migrem para o grupo 'Em Risco', ou estimular evolu√ß√£o para 'Crescimento'/'Premium'."
    }
}

for _, row in metricas.iterrows():
    cluster_id = int(row["Cluster"])
    nome, desc, cor = personas.get(cluster_id, ("‚ùì Indefinido", [], "#000000"))

    explicacao = explicacoes.get(nome, {})

    st.markdown(f"""
        <div class="cluster-card" style="border: 2px solid {cor};">
            <h2>{nome}</h2>
            <p><b>Cluster:</b> {cluster_id}</p>
            <p><b>Clientes:</b> {int(row['Cliente']):,}</p>
            <p><b>Receita M√©dia:</b> R$ {row['Receita Recorrente Anual (12M)']:.2f} M</p>
            <p><b>Satisfa√ß√£o M√©dia (NPS):</b> {row['Satisfa√ß√£o M√©dia (NPS)']:.2f}</p>
            <p><b>Tempo M√©dio de Relacionamento:</b> {row['Tempo de Relacionamento (dias)']:.0f} dias</p>
            <ul>
                {''.join([f"<li>{item}</li>" for item in desc])}
            </ul>
            <hr>
            <p><b>Quem s√£o:</b> {explicacao.get("quem", "")}</p>
            <p><b>Import√¢ncia:</b> {explicacao.get("importancia", "")}</p>
            <p><b>A√ß√£o recomendada:</b> {explicacao.get("acao", "")}</p>
        </div>

    """, unsafe_allow_html=True)
